// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookManagerClient is the client API for BookManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookManagerClient interface {
	Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*ResponseBM, error)
	Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*ResponseBM, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResponseBM, error)
}

type bookManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookManagerClient(cc grpc.ClientConnInterface) BookManagerClient {
	return &bookManagerClient{cc}
}

func (c *bookManagerClient) Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*ResponseBM, error) {
	out := new(ResponseBM)
	err := c.cc.Invoke(ctx, "/BookManager/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookManagerClient) Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*ResponseBM, error) {
	out := new(ResponseBM)
	err := c.cc.Invoke(ctx, "/BookManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookManagerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResponseBM, error) {
	out := new(ResponseBM)
	err := c.cc.Invoke(ctx, "/BookManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookManagerServer is the server API for BookManager service.
// All implementations must embed UnimplementedBookManagerServer
// for forward compatibility
type BookManagerServer interface {
	Insert(context.Context, *Book) (*ResponseBM, error)
	Update(context.Context, *Book) (*ResponseBM, error)
	Delete(context.Context, *DeleteRequest) (*ResponseBM, error)

}

// UnimplementedBookManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBookManagerServer struct {
}

func (UnimplementedBookManagerServer) Insert(context.Context, *Book) (*ResponseBM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedBookManagerServer) Update(context.Context, *Book) (*ResponseBM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBookManagerServer) Delete(context.Context, *DeleteRequest) (*ResponseBM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}


// UnsafeBookManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookManagerServer will
// result in compilation errors.
type UnsafeBookManagerServer interface {
	mustEmbedUnimplementedBookManagerServer()
}

func RegisterBookManagerServer(s grpc.ServiceRegistrar, srv BookManagerServer) {
	s.RegisterService(&BookManager_ServiceDesc, srv)
}

func _BookManager_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManagerServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookManager/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManagerServer).Insert(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManagerServer).Update(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManagerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookManager_ServiceDesc is the grpc.ServiceDesc for BookManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookManager",
	HandlerType: (*BookManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _BookManager_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookManager_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BookManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
